import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

#para encontrar curvas
from scipy.optimize import curve_fit
import numpy as np

class Funciones:

    def leer_csv(self, archivo, formato_separacion):
        datos_tabulados = pd.read_csv(archivo, sep=formato_separacion) 
        return datos_tabulados
    
        
   #documentados

    def graficar_datos_experimentales_iniciales(self, datos_eje_horizontal, datos_eje_vertical,
                                                etiqueta_horizontal, etiqueta_vertical, titulo, componente, grafico=None, ax=None, canvas=None):
        """
        Grafica los datos experimentales iniciales.

        Esta funci√≥n grafica los datos experimentales iniciales proporcionados
        en un diagrama de dispersi√≥n.

        Args:
            datos_eje_horizontal (array-like): Datos del eje horizontal, como el tiempo.
            datos_eje_vertical (array-like): Datos del eje vertical, como la concentraci√≥n.
            etiqueta_horizontal (str): Etiqueta del eje horizontal.
            etiqueta_vertical (str): Etiqueta del eje vertical.
            titulo (str): T√≠tulo del gr√°fico.
            componente (str): Componente a graficar.
            grafico (str, optional): Tipo de gr√°fico. Si es "MatplotlibWidget", se usar√° ax y canvas. Por defecto es None.
            ax (matplotlib.axes.Axes, optional): El objeto de ejes de Matplotlib para el gr√°fico. Por defecto es None.
            canvas (matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg, optional): El objeto de lienzo de Matplotlib para el gr√°fico. Por defecto es None.

        Returns:
            None
        """
        if grafico == "MatplotlibWidget":
            ax.clear()  # Limpiar el eje para una nueva gr√°fica
            ax.plot(datos_eje_horizontal, datos_eje_vertical, linestyle=':', label=componente, color='orange', linewidth=5)
            ax.set_xlabel(etiqueta_horizontal)  # Tiempo ('t (s)')
            ax.set_ylabel(etiqueta_vertical)    # Concentraci√≥n ('Concentracion (mol/L)')
            ax.set_title(titulo)                # T√≠tulo del gr√°fico ('Modelo de datos: A vs t' o similar)
            ax.legend()
            canvas.draw()  # Actualizar el lienzo con el nuevo gr√°fico
        else:
            plt.plot(datos_eje_horizontal, datos_eje_vertical, linestyle=':', label=componente, color='orange', linewidth=5)        
            plt.xlabel(etiqueta_horizontal)  # Tiempo ('t (s)')
            plt.ylabel(etiqueta_vertical)    # Concentraci√≥n ('Concentracion (mol/L)')
            plt.title(titulo)                # T√≠tulo del gr√°fico ('Modelo de datos: A vs t' o similar)
            plt.legend()
            plt.show()
    
    
    def concentracion_reactivo_funcion_conversion(self,concentracion_inicial_reactivo,conversion_reactivo_limitante):
        """
        Calcula la concentraci√≥n del reactivo en funci√≥n de la conversi√≥n de la reacci√≥n.

        Esta funci√≥n calcula la concentraci√≥n del reactivo en funci√≥n de la conversi√≥n

        Args:
            concentracion_inicial_reactivo (float): Concentraci√≥n inicial del reactivo.
            conversion_reactivo_limitante (float): Conversi√≥n del reactivo de 0 a 1 en tanto por uno.
        
        Returns:
            A = A0 * (1 - XA)
            float: La concentraci√≥n del reactivo en funci√≥n de la conversi√≥n.
        """
            
        return concentracion_inicial_reactivo*(1-conversion_reactivo_limitante)

    
    def conversion_reactivo_limitante(self,concentracion_inicial_reactivo_limitante,concentracion_reactivo_limitante):
        """
        Calcula la conversi√≥n del reactivo limitante en una reacci√≥n qu√≠mica.

        Esta funci√≥n calcula la conversi√≥n del reactivo limitante en una reacci√≥n
        qu√≠mica utilizando la concentraci√≥n inicial del reactivo limitante y la
        concentraci√≥n actual del reactivo limitante.

        Args:
            concentracion_inicial_reactivo_limitante (float): Concentraci√≥n inicial del reactivo limitante.
            concentracion_reactivo_limitante (float): Concentraci√≥n actual del reactivo limitante.

        Returns:
            x_A = 1 - (A / A0)
            float: La conversi√≥n del reactivo limitante en la reacci√≥n.
        """
        return 1 - (concentracion_reactivo_limitante / concentracion_inicial_reactivo_limitante)
    
    def concentracion_producto(self,Producto_0, coeficiente_producto, a, XA, A0):
        """
        Calcula la concentraci√≥n de un producto de una reacci√≥n qu√≠mica.

        Esta funci√≥n calcula la concentraci√≥n de un producto de una reacci√≥n qu√≠mica
        utilizando la concentraci√≥n inicial del producto, el coeficiente estequiom√©trico
        del producto, el coeficiente estequiom√©trico del reactivo limitante, la conversi√≥n
        de la reacci√≥n y la concentraci√≥n inicial del reactivo limitante.

        Args:
            Producto_0 (float): Concentraci√≥n inicial del producto.
            coeficiente_producto (int): Coeficiente estequiom√©trico del producto en la ecuaci√≥n balanceada de la reacci√≥n.
            a (int): Coeficiente estequiom√©trico del reactivo limitante en la ecuaci√≥n balanceada de la reacci√≥n.
            XA (float): Conversi√≥n de la reacci√≥n.
            A0 (float): Concentraci√≥n inicial del reactivo limitante.

        Returns:
            Producto = Producto_0 + (coeficiente_producto / a) * (A0 * XA)
            float: La concentraci√≥n del producto en el estado deseado.
        """
        return Producto_0 + (coeficiente_producto / a) * (A0 * XA)
    
    def conversion_reactivo_limitante_dado_producto(self,concentracion_producto,concentracion_inicial_producto,concentracion_inicial_reactivo_limitante, coeficiente_producto, coeficiente_reactivo_limitante ):
        """
        Calcula la conversi√≥n del reactivo limitante en funci√≥n de la concentraci√≥n del producto.

        Esta funci√≥n calcula la conversi√≥n del reactivo limitante en funci√≥n de la concentraci√≥n
        del producto, utilizando la concentraci√≥n del producto, la concentraci√≥n inicial del producto,
        la concentraci√≥n inicial del reactivo limitante, el coeficiente estequiom√©trico del producto y
        el coeficiente estequiom√©trico del reactivo limitante.

        Args:
            concentracion_producto (float): Concentraci√≥n del producto.
            concentracion_inicial_producto (float): Concentraci√≥n inicial del producto.
            concentracion_inicial_reactivo_limitante (float): Concentraci√≥n inicial del reactivo limitante.
            coeficiente_producto (int): Coeficiente estequiom√©trico del producto.
            coeficiente_reactivo_limitante (int): Coeficiente estequiom√©trico del reactivo limitante.

        Returns:
            float: La conversi√≥n del reactivo limitante en funci√≥n de la concentraci√≥n del producto.
        """
        return (concentracion_producto - concentracion_inicial_producto) / ((coeficiente_producto / coeficiente_reactivo_limitante) * concentracion_inicial_reactivo_limitante)

        
    
    def calcular_delta_n(self,coeficientes_productos, coeficientes_reactivos):
        """
        Calcula el cambio en el n√∫mero de moles de gas en una reacci√≥n qu√≠mica.

        Esta funci√≥n calcula Œîùëõ = [ Œ£Coeficiente de los Productos] ‚àí [Œ£Coeficiente de los Reactivos]
        para una reacci√≥n qu√≠mica.

        Args:
            coeficientes_productos (list): Lista de coeficientes de los productos en la ecuaci√≥n qu√≠mica.
            coeficientes_reactivos (list): Lista de coeficientes de los reactivos en la ecuaci√≥n qu√≠mica.

        Returns:
            int: El cambio en el n√∫mero de moles de gas.
        """
        suma_productos = sum(coeficientes_productos)
        suma_reactivos = sum(coeficientes_reactivos)
        delta_n = suma_productos - suma_reactivos
        return delta_n

    def calcular_epsilon_A(self,y_A0, delta_n, a):
        """
        Calcula el cambio en la fracci√≥n molar del componente A en una mezcla.

        Esta funci√≥n calcula ùúÄùê¥ = ùë¶ùê¥0 * ùõ•ùëõ / ùëé, donde ùë¶ùê¥0 es la fracci√≥n molar inicial de A,
        Œîùëõ es el cambio en el n√∫mero de moles y ùëé es el coeficiente estequiom√©trico de A.

        Args:
            y_A0 (float): Fracci√≥n molar inicial del componente A.
            delta_n (int): Cambio en el n√∫mero de moles de gas.
            a (int): Coeficiente estequiom√©trico de A.

        Returns:
            float: El cambio en la fracci√≥n molar del componente A en la mezcla.
        """
        epsilon_A = y_A0 * delta_n / a
        return epsilon_A


    def modelo_arrenius_dos_puntos(self,k1, T1, T2, Energia_activacion, escala_temp='K', unidades='J', R_custom=None):
        if escala_temp == 'K':
            T1_absoluta = T1 + 273.15  # Convertir a Kelvin
            T2_absoluta = T2 + 273.15  # Convertir a Kelvin
        elif escala_temp == 'R':
            T1_absoluta = T1 + 459.67  # Convertir a Rankine
            T2_absoluta = T2 + 459.67  # Convertir a Rankine
        else:
            raise ValueError("Escala de temperatura no reconocida. Elija entre 'K' o 'R'.")

        if R_custom is not None:
            R = R_custom
        else:
            if unidades == 'J':
                R = 8.314  # J/(mol K)
            elif unidades == 'atm':
                R = 0.0821  # atm L/(mol K)
            elif unidades == 'cal':
                R = 1.987  # cal/(mol K)
            elif unidades == 'psia*ft3':
                R = 10.73   # psia*ft3/(lbmol R)
            else:
                raise ValueError("Unidades no reconocidas. Elija entre 'J', 'atm', 'cal' o 'psia*ft3'.")

        k2 = k1 * np.exp((-Energia_activacion/R)*(1/T2_absoluta - 1/T1_absoluta))
        
        return k2
    
    def calcular_energia_activacion(k1, T1, k2, T2, escala_temp='K', unidades='J', R_custom=None):
        if escala_temp == 'K':
            T1_absoluta = T1 + 273.15  # Convertir a Kelvin
            T2_absoluta = T2 + 273.15  # Convertir a Kelvin
        elif escala_temp == 'R':
            T1_absoluta = T1 + 459.67  # Convertir a Rankine
            T2_absoluta = T2 + 459.67  # Convertir a Rankine
        else:
            raise ValueError("Escala de temperatura no reconocida. Elija entre 'K' o 'R'.")

        if R_custom is not None:
            R = R_custom
        else:
            if unidades == 'J':
                R = 8.314  # J/(mol K)
            elif unidades == 'atm':
                R = 0.0821  # atm L/(mol K)
            elif unidades == 'cal':
                R = 1.987  # cal/(mol K)
            elif unidades == 'psia*ft3':
                R = 10.73   # psia*ft3/(lbmol R)
            else:
                raise ValueError("Unidades no reconocidas. Elija entre 'J', 'atm', 'cal' o 'psia*ft3'.")
            
        Energia_activacion = -R * (1/T2_absoluta - 1/T1_absoluta)**-1 * np.log(k2/k1)
    
        return Energia_activacion
    
    def arrenius_n_puntos(self, T, k, escala_temp='C', unidades='J', R_custom=None):
        if escala_temp == 'C':
            T_absoluta = T + 273.15  # Convertir a Kelvin
        elif escala_temp == 'F':
            T_absoluta = T + 459.67
        elif escala_temp == 'K':
            T_absoluta = T
        elif escala_temp == 'R':
            T_absoluta = T
        else:
            raise ValueError("Escala de temperatura no reconocida. Elija entre 'C', 'F', 'K' o 'R'.")
        # cambiar temperatura_absoluta a su reciproco
        reciproco_T = (1/T_absoluta)

        if R_custom is not None:
            R = R_custom
        else:
            if unidades == 'J':
                R = 8.314
            elif unidades == 'atm':
                R = 0.0821
            elif unidades == 'cal':
                R = 1.987
            elif unidades == 'psia*ft3':
                R = 10.73
            else:
                raise ValueError("Unidades no reconocidas. Elija entre 'J', 'atm', 'cal' o 'psia*ft3'.")
        
        # Calcular la energ√≠a de activaci√≥n
        Energia_activacion = -R * reciproco_T * np.log(k)

        return Energia_activacion
                          
    
    def gas_concentracion_componente(self,coeficiente_gas_Z,y_A0,Presion_total,R,Temperatura,escala_temp=None):
        
        R_gas = float(R.text())  # Convertir el valor de R a un float     
        if escala_temp == 'C':
            T_absoluta = Temperatura + 273.15  # Convertir a Kelvin
        elif escala_temp == 'F':
            T_absoluta = Temperatura + 459.67  # Convertir a Rankine
        elif escala_temp in ['K', 'R']:
            T_absoluta = Temperatura  # No es necesario convertir
        else:
            raise ValueError("Escala de temperatura no reconocida. Elija entre 'C', 'F', 'K' o 'R'.")

        Presion_parcial_componente = Presion_total*y_A0
        
        concentracion_componente=coeficiente_gas_Z*Presion_parcial_componente/(R_gas*T_absoluta)
        return concentracion_componente


# graficas

    def graficar_datos_experimentales_iniciales_widget(self, datos_eje_horizontal, datos_eje_vertical,
                                                    etiqueta_horizontal, etiqueta_vertical, titulo, componente):
            """
            Grafica los datos experimentales iniciales en el lienzo de Matplotlib.

            Args:
                datos_eje_horizontal (array-like): Datos del eje horizontal, como el tiempo.
                datos_eje_vertical (array-like): Datos del eje vertical, como la concentraci√≥n.
                etiqueta_horizontal (str): Etiqueta del eje horizontal.
                etiqueta_vertical (str): Etiqueta del eje vertical.
                titulo (str): T√≠tulo del gr√°fico.
                componente (str): Etiqueta de la curva en el gr√°fico.

            Returns:
                None
            """
            # Borrar cualquier gr√°fico previo en el lienzo
            self.ax.clear()

            # Graficar los datos en el lienzo
            self.ax.plot(datos_eje_horizontal, datos_eje_vertical, linestyle=':', label=componente, color='orange', linewidth=5)
            
            # Configurar etiquetas y t√≠tulo
            self.ax.set_xlabel(etiqueta_horizontal)
            self.ax.set_ylabel(etiqueta_vertical)
            self.ax.set_title(titulo)
            
            # Mostrar la leyenda
            self.ax.legend()

            # Actualizar el lienzo para que se muestre el nuevo gr√°fico
            self.canvas.draw()

    def gas_conversion_componente_principal_epsilon_a(self,presion_total, presion_total_inicial,epsilon_a):
        #viene de la ec Presion_total = presion_total_inicial *(1+epsion_a*conversion_A)
        
        conversion_A = ((presion_total/presion_total_inicial) - 1)/epsilon_a
        
        return conversion_A
    
    def propiedad_conversion_componente_principal_epsilon_a(self,propiedad, propiedad_inicial,epsilon_a):
        #an√°logo de viene de la ec Presion_total = presion_total_inicial *(1+epsion_a*conversion_A)

        """
            Calcula la conversi√≥n del reactivo limitante dado el cambio en una propiedad medible.
            
            Args:
            propiedad (float): Valor de la propiedad medida en el tiempo t.
            propiedad_inicial (float): Valor inicial de la propiedad antes de la reacci√≥n o t_0 = 0.
            epsilon_a (float): Cambio relativo en la propiedad por unidad de conversi√≥n del reactivo A.
            
            Returns:
            float: Conversi√≥n del reactivo principal A.
        """
        
        conversion_reactivo_limitante = ((propiedad/propiedad_inicial) - 1)/epsilon_a
        
        return conversion_reactivo_limitante
    
    def propiedad_conversion_componente_principal(self,propiedad, propiedad_inicial):
        #viene de la ec Presion_total = presion_total_inicial *(1+epsion_a*conversion_A)
        
        conversion_A = ((propiedad/propiedad_inicial) - 1)
        
        return conversion_A
    
    def propiedad_conversion_reactivo_limitante_fluctuante(self, propiedad, propiedad_inicial, epsilon_a=None, aumento=None):
        """
        Calcula la conversi√≥n del reactivo limitante dado el cambio en una propiedad medible.
        """
        if aumento:  # Si la propiedad aumenta
            if epsilon_a is None:
                conversion_reactivo_limitante = ((propiedad / propiedad_inicial) - 1)
            else:
                conversion_reactivo_limitante = ((propiedad / propiedad_inicial) - 1) / epsilon_a
        else:  # Si la propiedad disminuye o si aumento es None o False
            if epsilon_a is None:
                conversion_reactivo_limitante = (1 - (propiedad / propiedad_inicial))
            else:
                conversion_reactivo_limitante = (1 - (propiedad / propiedad_inicial)) / (-epsilon_a)
                
        return conversion_reactivo_limitante