import pandas as pd
import matplotlib.pyplot as plt

#para encontrar curvas
from scipy.optimize import curve_fit
import numpy as np

class Funciones:

    def leer_csv(self, archivo, formato_separacion):
        datos_tabulados = pd.read_csv(archivo, sep=formato_separacion) 
        return datos_tabulados
    
        
    # es A o CA en funcion de la conversion

    def concentracion_producto_principal(concentracion_inicial_producto_principal,conversion_producto_principal):
        return concentracion_inicial_producto_principal*(1-conversion_producto_principal)
    
    
    #documentados

    def graficar_datos_experimentales_iniciales(self, datos_eje_horizontal, datos_eje_vertical,
                                                 etiqueta_horizontal, etiqueta_vertical, titulo,componente):
        """
        Grafica los datos experimentales iniciales.

        Esta funci√≥n grafica los datos experimentales iniciales proporcionados
        en un diagrama de dispersi√≥n.

        Args:
            datos_eje_horizontal (array-like): Datos del eje horizontal, como el tiempo.
            datos_eje_vertical (array-like): Datos del eje vertical, como la concentraci√≥n.
            etiqueta_horizontal (str): Etiqueta del eje horizontal.
            etiqueta_vertical (str): Etiqueta del eje vertical.
            titulo (str): T√≠tulo del gr√°fico.

        Returns:
            None
        """
        plt.plot(datos_eje_horizontal, datos_eje_vertical, linestyle=':', label=componente, color='orange', linewidth=5)        
        plt.xlabel(etiqueta_horizontal)  # Tiempo ('t (s)')
        plt.ylabel(etiqueta_vertical)    # Concentraci√≥n ('Concentracion (mol/L)')
        plt.title(titulo)                # T√≠tulo del gr√°fico ('Modelo de datos: A vs t' o similar)
        plt.legend()
        plt.show()


    def concentracion_producto_principal(self,A0, XA):
        """
        Calcula la concentraci√≥n del producto principal.

        Esta funci√≥n calcula la concentraci√≥n del producto principal
        utilizando la concentraci√≥n inicial del producto principal y
        la conversi√≥n de la reacci√≥n.

        Args:
            A0 (float): Concentraci√≥n inicial del producto principal.
            XA conversi√≥n del producto principal (float): Conversi√≥n de la reacci√≥n de 0 a 1 en tanto por uno.

        Returns:
            float: La concentraci√≥n del producto principal.
        """
        return A0 * (1 - XA)
    
    def conversion_A(self,A0, A):
        """
        Calcula la conversi√≥n del producto principal A de la reacci√≥n.

        Esta funci√≥n calcula la conversi√≥n de la reacci√≥n utilizando
        la concentraci√≥n inicial del producto principal y la concentraci√≥n
        actual del producto principal.

        Args:
            A0 (float): Concentraci√≥n inicial del producto principal.
            A (float): Concentraci√≥n actual del producto principal.

        Returns:
            float: La conversi√≥n de la reacci√≥n.
        """
        return 1 - (A / A0)
    
    def concentracion_Producto(self,Producto_0, coeficiente_producto, a, XA, A0):
        """
        Calcula la concentraci√≥n de un producto de una reacci√≥n qu√≠mica.

        Esta funci√≥n calcula la concentraci√≥n de un producto de una reacci√≥n qu√≠mica
        utilizando la concentraci√≥n inicial del producto, el coeficiente estequiom√©trico
        del producto, el coeficiente estequiom√©trico del reactivo limitante, la conversi√≥n
        de la reacci√≥n y la concentraci√≥n inicial del reactivo limitante.

        Args:
            Producto_0 (float): Concentraci√≥n inicial del producto.
            coeficiente_producto (int): Coeficiente estequiom√©trico del producto en la ecuaci√≥n balanceada de la reacci√≥n.
            a (int): Coeficiente estequiom√©trico del reactivo limitante en la ecuaci√≥n balanceada de la reacci√≥n.
            XA (float): Conversi√≥n de la reacci√≥n.
            A0 (float): Concentraci√≥n inicial del reactivo limitante.

        Returns:
            float: La concentraci√≥n del producto en el estado deseado.
        """
        return Producto_0 + (coeficiente_producto / a) * (A0 * XA)
    
    def calcular_delta_n(self,coeficientes_productos, coeficientes_reactivos):
        """
        Calcula el cambio en el n√∫mero de moles de gas en una reacci√≥n qu√≠mica.

        Esta funci√≥n calcula Œîùëõ = [ Œ£Coeficiente de los Productos] ‚àí [Œ£Coeficiente de los Reactivos]
        para una reacci√≥n qu√≠mica.

        Args:
            coeficientes_productos (list): Lista de coeficientes de los productos en la ecuaci√≥n qu√≠mica.
            coeficientes_reactivos (list): Lista de coeficientes de los reactivos en la ecuaci√≥n qu√≠mica.

        Returns:
            int: El cambio en el n√∫mero de moles de gas.
        """
        suma_productos = sum(coeficientes_productos)
        suma_reactivos = sum(coeficientes_reactivos)
        delta_n = suma_productos - suma_reactivos
        return delta_n

    def calcular_epsilon_A(self,y_A0, delta_n, a):
        """
        Calcula el cambio en la fracci√≥n molar del componente A en una mezcla.

        Esta funci√≥n calcula ùúÄùê¥ = ùë¶ùê¥0 * ùõ•ùëõ / ùëé, donde ùë¶ùê¥0 es la fracci√≥n molar inicial de A,
        Œîùëõ es el cambio en el n√∫mero de moles y ùëé es el coeficiente estequiom√©trico de A.

        Args:
            y_A0 (float): Fracci√≥n molar inicial del componente A.
            delta_n (int): Cambio en el n√∫mero de moles de gas.
            a (int): Coeficiente estequiom√©trico de A.

        Returns:
            float: El cambio en la fracci√≥n molar del componente A en la mezcla.
        """
        epsilon_A = y_A0 * delta_n / a
        return epsilon_A


    def modelo_arrenius_dos_puntos(self,k1, T1, T2, Energia_activacion, escala_temp='K', unidades='J', R_custom=None):
        if escala_temp == 'K':
            T1_absoluta = T1 + 273.15  # Convertir a Kelvin
            T2_absoluta = T2 + 273.15  # Convertir a Kelvin
        elif escala_temp == 'R':
            T1_absoluta = T1 + 459.67  # Convertir a Rankine
            T2_absoluta = T2 + 459.67  # Convertir a Rankine
        else:
            raise ValueError("Escala de temperatura no reconocida. Elija entre 'K' o 'R'.")

        if R_custom is not None:
            R = R_custom
        else:
            if unidades == 'J':
                R = 8.314  # J/(mol K)
            elif unidades == 'atm':
                R = 0.0821  # atm L/(mol K)
            elif unidades == 'cal':
                R = 1.987  # cal/(mol K)
            elif unidades == 'psia*ft3':
                R = 10.73   # psia*ft3/(lbmol R)
            else:
                raise ValueError("Unidades no reconocidas. Elija entre 'J', 'atm', 'cal' o 'psia*ft3'.")

        k2 = k1 * np.exp((-Energia_activacion/R)*(1/T2_absoluta - 1/T1_absoluta))
        
        return k2
    
    def gas_concentracion_componente(self,coeficiente_gas_Z,y_A0,Presion_total,R,Temperatura,escala_temp='K'):
    
        if escala_temp == 'K':
            T_absoluta = Temperatura + 273.15  # Convertir a Kelvin
        elif escala_temp == 'R':
            T_absoluta = Temperatura + 459.67  # Convertir a Rankine
        
        else:
            raise ValueError("Escala de temperatura no reconocida. Elija entre 'K' o 'R'.")

        Presion_parcial_componente = Presion_total*y_A0
        
        concentracion_componente=coeficiente_gas_Z*Presion_parcial_componente/(R*T_absoluta)
        return concentracion_componente



# revisar R https://cruzfierro.com/formularios/R.pdf